// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package wire

import (
	auth2 "github.com/boreq/hydro/adapters/auth"
	hydro2 "github.com/boreq/hydro/adapters/hydro"
	"github.com/boreq/hydro/adapters/hydro/controller"
	"github.com/boreq/hydro/application"
	"github.com/boreq/hydro/application/auth"
	"github.com/boreq/hydro/application/hydro"
	"github.com/boreq/hydro/internal/config"
	"github.com/boreq/hydro/internal/service"
	"github.com/boreq/hydro/ports/http"
	"go.etcd.io/bbolt"
)

// Injectors from wire.go:

func BuildTransactableAuthRepositories(tx *bbolt.Tx) (*auth.TransactableRepositories, error) {
	invitationRepository, err := auth2.NewInvitationRepository(tx)
	if err != nil {
		return nil, err
	}
	userRepository, err := auth2.NewUserRepository(tx)
	if err != nil {
		return nil, err
	}
	transactableRepositories := &auth.TransactableRepositories{
		Invitations: invitationRepository,
		Users:       userRepository,
	}
	return transactableRepositories, nil
}

func BuildTransactableHydroAdapters(tx *bbolt.Tx) (*hydro.TransactableAdapters, error) {
	controllerRepository, err := hydro2.NewControllerRepository(tx)
	if err != nil {
		return nil, err
	}
	deviceRepository, err := hydro2.NewDeviceRepository(tx)
	if err != nil {
		return nil, err
	}
	transactableAdapters := &hydro.TransactableAdapters{
		Controllers: controllerRepository,
		Devices:     deviceRepository,
	}
	return transactableAdapters, nil
}

func BuildAuthForTest(db *bbolt.DB) (*auth.Auth, error) {
	bcryptPasswordHasher := auth2.NewBcryptPasswordHasher()
	wireAuthRepositoriesProvider := newAuthRepositoriesProvider()
	authTransactionProvider := auth2.NewAuthTransactionProvider(db, wireAuthRepositoriesProvider)
	registerInitialHandler := auth.NewRegisterInitialHandler(bcryptPasswordHasher, authTransactionProvider)
	registerHandler := auth.NewRegisterHandler(bcryptPasswordHasher, authTransactionProvider)
	cryptoAccessTokenGenerator := auth2.NewCryptoAccessTokenGenerator()
	loginHandler := auth.NewLoginHandler(bcryptPasswordHasher, authTransactionProvider, cryptoAccessTokenGenerator)
	logoutHandler := auth.NewLogoutHandler(authTransactionProvider, cryptoAccessTokenGenerator)
	checkAccessTokenHandler := auth.NewCheckAccessTokenHandler(authTransactionProvider, cryptoAccessTokenGenerator)
	listHandler := auth.NewListHandler(authTransactionProvider)
	cryptoStringGenerator := auth2.NewCryptoStringGenerator()
	createInvitationHandler := auth.NewCreateInvitationHandler(cryptoStringGenerator, authTransactionProvider)
	removeHandler := auth.NewRemoveHandler(authTransactionProvider)
	setPasswordHandler := auth.NewSetPasswordHandler(bcryptPasswordHasher, authTransactionProvider)
	authAuth := &auth.Auth{
		RegisterInitial:  registerInitialHandler,
		Register:         registerHandler,
		Login:            loginHandler,
		Logout:           logoutHandler,
		CheckAccessToken: checkAccessTokenHandler,
		List:             listHandler,
		CreateInvitation: createInvitationHandler,
		Remove:           removeHandler,
		SetPassword:      setPasswordHandler,
	}
	return authAuth, nil
}

func BuildAuth(conf *config.Config) (*auth.Auth, error) {
	bcryptPasswordHasher := auth2.NewBcryptPasswordHasher()
	db, err := newBolt(conf)
	if err != nil {
		return nil, err
	}
	wireAuthRepositoriesProvider := newAuthRepositoriesProvider()
	authTransactionProvider := auth2.NewAuthTransactionProvider(db, wireAuthRepositoriesProvider)
	registerInitialHandler := auth.NewRegisterInitialHandler(bcryptPasswordHasher, authTransactionProvider)
	registerHandler := auth.NewRegisterHandler(bcryptPasswordHasher, authTransactionProvider)
	cryptoAccessTokenGenerator := auth2.NewCryptoAccessTokenGenerator()
	loginHandler := auth.NewLoginHandler(bcryptPasswordHasher, authTransactionProvider, cryptoAccessTokenGenerator)
	logoutHandler := auth.NewLogoutHandler(authTransactionProvider, cryptoAccessTokenGenerator)
	checkAccessTokenHandler := auth.NewCheckAccessTokenHandler(authTransactionProvider, cryptoAccessTokenGenerator)
	listHandler := auth.NewListHandler(authTransactionProvider)
	cryptoStringGenerator := auth2.NewCryptoStringGenerator()
	createInvitationHandler := auth.NewCreateInvitationHandler(cryptoStringGenerator, authTransactionProvider)
	removeHandler := auth.NewRemoveHandler(authTransactionProvider)
	setPasswordHandler := auth.NewSetPasswordHandler(bcryptPasswordHasher, authTransactionProvider)
	authAuth := &auth.Auth{
		RegisterInitial:  registerInitialHandler,
		Register:         registerHandler,
		Login:            loginHandler,
		Logout:           logoutHandler,
		CheckAccessToken: checkAccessTokenHandler,
		List:             listHandler,
		CreateInvitation: createInvitationHandler,
		Remove:           removeHandler,
		SetPassword:      setPasswordHandler,
	}
	return authAuth, nil
}

func BuildService(conf *config.Config) (*service.Service, error) {
	bcryptPasswordHasher := auth2.NewBcryptPasswordHasher()
	db, err := newBolt(conf)
	if err != nil {
		return nil, err
	}
	wireAuthRepositoriesProvider := newAuthRepositoriesProvider()
	authTransactionProvider := auth2.NewAuthTransactionProvider(db, wireAuthRepositoriesProvider)
	registerInitialHandler := auth.NewRegisterInitialHandler(bcryptPasswordHasher, authTransactionProvider)
	registerHandler := auth.NewRegisterHandler(bcryptPasswordHasher, authTransactionProvider)
	cryptoAccessTokenGenerator := auth2.NewCryptoAccessTokenGenerator()
	loginHandler := auth.NewLoginHandler(bcryptPasswordHasher, authTransactionProvider, cryptoAccessTokenGenerator)
	logoutHandler := auth.NewLogoutHandler(authTransactionProvider, cryptoAccessTokenGenerator)
	checkAccessTokenHandler := auth.NewCheckAccessTokenHandler(authTransactionProvider, cryptoAccessTokenGenerator)
	listHandler := auth.NewListHandler(authTransactionProvider)
	cryptoStringGenerator := auth2.NewCryptoStringGenerator()
	createInvitationHandler := auth.NewCreateInvitationHandler(cryptoStringGenerator, authTransactionProvider)
	removeHandler := auth.NewRemoveHandler(authTransactionProvider)
	setPasswordHandler := auth.NewSetPasswordHandler(bcryptPasswordHasher, authTransactionProvider)
	authAuth := auth.Auth{
		RegisterInitial:  registerInitialHandler,
		Register:         registerHandler,
		Login:            loginHandler,
		Logout:           logoutHandler,
		CheckAccessToken: checkAccessTokenHandler,
		List:             listHandler,
		CreateInvitation: createInvitationHandler,
		Remove:           removeHandler,
		SetPassword:      setPasswordHandler,
	}
	wireHydroAdaptersProvider := newHydroAdaptersProvider()
	transactionProvider := hydro2.NewTransactionProvider(db, wireHydroAdaptersProvider)
	uuidGenerator := hydro2.NewUUIDGenerator()
	addControllerHandler := hydro.NewAddControllerHandler(transactionProvider, uuidGenerator)
	setControllerDevicesHandler := hydro.NewSetControllerDevicesHandler(transactionProvider, uuidGenerator)
	listControllersHandler := hydro.NewListControllersHandler(transactionProvider)
	listControllerDevicesHandler := hydro.NewListControllerDevicesHandler(transactionProvider)
	hydroHydro := hydro.Hydro{
		AddControllerHandler:         addControllerHandler,
		SetControllerDevicesHandler:  setControllerDevicesHandler,
		ListControllersHandler:       listControllersHandler,
		ListControllerDevicesHandler: listControllerDevicesHandler,
	}
	applicationApplication := &application.Application{
		Auth:  authAuth,
		Hydro: hydroHydro,
	}
	handler, err := http.NewHandler(applicationApplication)
	if err != nil {
		return nil, err
	}
	server, err := newServer(handler, conf)
	if err != nil {
		return nil, err
	}
	clientMock := controller.NewClientMock()
	scanner := newScanner(clientMock, applicationApplication)
	serviceService := service.NewService(server, scanner)
	return serviceService, nil
}

func BuildComponentTestService(db *bbolt.DB, conf *config.Config) (ComponentTestService, error) {
	bcryptPasswordHasher := auth2.NewBcryptPasswordHasher()
	wireAuthRepositoriesProvider := newAuthRepositoriesProvider()
	authTransactionProvider := auth2.NewAuthTransactionProvider(db, wireAuthRepositoriesProvider)
	registerInitialHandler := auth.NewRegisterInitialHandler(bcryptPasswordHasher, authTransactionProvider)
	registerHandler := auth.NewRegisterHandler(bcryptPasswordHasher, authTransactionProvider)
	cryptoAccessTokenGenerator := auth2.NewCryptoAccessTokenGenerator()
	loginHandler := auth.NewLoginHandler(bcryptPasswordHasher, authTransactionProvider, cryptoAccessTokenGenerator)
	logoutHandler := auth.NewLogoutHandler(authTransactionProvider, cryptoAccessTokenGenerator)
	checkAccessTokenHandler := auth.NewCheckAccessTokenHandler(authTransactionProvider, cryptoAccessTokenGenerator)
	listHandler := auth.NewListHandler(authTransactionProvider)
	cryptoStringGenerator := auth2.NewCryptoStringGenerator()
	createInvitationHandler := auth.NewCreateInvitationHandler(cryptoStringGenerator, authTransactionProvider)
	removeHandler := auth.NewRemoveHandler(authTransactionProvider)
	setPasswordHandler := auth.NewSetPasswordHandler(bcryptPasswordHasher, authTransactionProvider)
	authAuth := auth.Auth{
		RegisterInitial:  registerInitialHandler,
		Register:         registerHandler,
		Login:            loginHandler,
		Logout:           logoutHandler,
		CheckAccessToken: checkAccessTokenHandler,
		List:             listHandler,
		CreateInvitation: createInvitationHandler,
		Remove:           removeHandler,
		SetPassword:      setPasswordHandler,
	}
	wireHydroAdaptersProvider := newHydroAdaptersProvider()
	transactionProvider := hydro2.NewTransactionProvider(db, wireHydroAdaptersProvider)
	uuidGenerator := hydro2.NewUUIDGenerator()
	addControllerHandler := hydro.NewAddControllerHandler(transactionProvider, uuidGenerator)
	setControllerDevicesHandler := hydro.NewSetControllerDevicesHandler(transactionProvider, uuidGenerator)
	listControllersHandler := hydro.NewListControllersHandler(transactionProvider)
	listControllerDevicesHandler := hydro.NewListControllerDevicesHandler(transactionProvider)
	hydroHydro := hydro.Hydro{
		AddControllerHandler:         addControllerHandler,
		SetControllerDevicesHandler:  setControllerDevicesHandler,
		ListControllersHandler:       listControllersHandler,
		ListControllerDevicesHandler: listControllerDevicesHandler,
	}
	applicationApplication := &application.Application{
		Auth:  authAuth,
		Hydro: hydroHydro,
	}
	handler, err := http.NewHandler(applicationApplication)
	if err != nil {
		return ComponentTestService{}, err
	}
	server, err := newServer(handler, conf)
	if err != nil {
		return ComponentTestService{}, err
	}
	clientMock := controller.NewClientMock()
	scanner := newTestScanner(clientMock, applicationApplication)
	serviceService := service.NewService(server, scanner)
	componentTestService := ComponentTestService{
		Service: serviceService,
		Config:  conf,
	}
	return componentTestService, nil
}

func BuildUnitTestHydroApplication() (UnitTestHydroApplication, error) {
	controllerRepositoryMock := hydro2.NewControllerRepositoryMock()
	deviceRepositoryMock := hydro2.NewDeviceRepositoryMock()
	transactableAdapters := &hydro.TransactableAdapters{
		Controllers: controllerRepositoryMock,
		Devices:     deviceRepositoryMock,
	}
	mockTransactionProvider := hydro2.NewMockTransactionProvider(transactableAdapters)
	uuidGeneratorMock := hydro2.NewUUIDGeneratorMock()
	addControllerHandler := hydro.NewAddControllerHandler(mockTransactionProvider, uuidGeneratorMock)
	setControllerDevicesHandler := hydro.NewSetControllerDevicesHandler(mockTransactionProvider, uuidGeneratorMock)
	listControllersHandler := hydro.NewListControllersHandler(mockTransactionProvider)
	listControllerDevicesHandler := hydro.NewListControllerDevicesHandler(mockTransactionProvider)
	hydroHydro := hydro.Hydro{
		AddControllerHandler:         addControllerHandler,
		SetControllerDevicesHandler:  setControllerDevicesHandler,
		ListControllersHandler:       listControllersHandler,
		ListControllerDevicesHandler: listControllerDevicesHandler,
	}
	unitTestHydroRepositories := UnitTestHydroRepositories{
		Controller: controllerRepositoryMock,
		Device:     deviceRepositoryMock,
	}
	unitTestHydroApplication := UnitTestHydroApplication{
		Hydro:        hydroHydro,
		Repositories: unitTestHydroRepositories,
	}
	return unitTestHydroApplication, nil
}

// wire.go:

type ComponentTestService struct {
	Service *service.Service
	Config  *config.Config
}

type UnitTestHydroApplication struct {
	Hydro        hydro.Hydro
	Repositories UnitTestHydroRepositories
}

type UnitTestHydroRepositories struct {
	Controller *hydro2.ControllerRepositoryMock
	Device     *hydro2.DeviceRepositoryMock
}
